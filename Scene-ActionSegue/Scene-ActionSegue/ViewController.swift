//
//  ViewController.swift
//  Scene-ActionSegue
//
//  Created by G4ENG on 08/07/2019.
//  Copyright © 2019 G4ENG. All rights reserved.
//

import UIKit

// 세그웨이라고 불리는 객체는 스토리보드에서 뷰컨 사이의 연결 관계 및 화면 전환을 관리하는 역할을 한다. 세그웨이는 화면과 화면을 연결하기 위해 아무런 소스 코드도 필요하지 않다는 특징이 있다. 뷰컨과 뷰컨 또는 화면 전환의 매개체가 되는 버튼과 뷰컨 사이를 직접 연결하는 식으로 화면 전환 관계를 구성
// 스토리보드상에서 세그웨이는 뷰컨 사이에 연결된 화살표로 표시됨. 이 화살표는 한쪽 방향으로 향하는 모습을 하고 있는데, 이는 출발지와 목적지가 같나느 듯. 출발지와 목적지, 그 양쪽을 연결하는 일종의 다리 같은 것. 세그웨이는 한쪽으로만 통행 가능.
// 소스 코드를 이용해서 화면 전환을 처리하려면 대상이 되는 뷰컨의 정보를 읽어와 직접 인스턴스화한 후 화면을 전환해야 하지만, 세그웨이를 이용하면 뷰컨에 대한 정보가 필요없다. 또한 뷰컨의 객체를 생성할 필요도 없다. 세그웨이가 스토리보드상의 연결 정보를 이용하여 대상 뷰컨의 인스턴스를 자동으로 만들어주고 실행되는 순간 스토리보드를 통하여 이미 출발지와 목적지 뷰컨에 대한 인스턴스가 생성되고, 그 포인터가 세그웨이 객체에 설정됨.
// 세그웨이 목적지는 뷰컨이지만, 출발지는 버튼이나 테이블셀 등의 컨트롤이 될 수도 있다. 이들 컨트롤은 사용자의 이벤트를 전달받아 화면 전환의 매개체 역할을 한다는 공통점을 가진다. 출발점이 뷰컨 자체인 경우를 *매뉴얼 세그웨이, 버튼 등이 출발점인 경우 *액션 세그웨이로 나눔. 그러나 이 구분은 방식에만 차이있을 뿐, 둘다 화면 전환이 이루어짐.
// 매뉴얼을 실행하려면 UIKit에 정의된 performSegue(~:~:)를 사용함. 소스 코드에서 적절한 시점에 이 메소드를 호출하기만 하면 세그웨이가 실행된다. 반면 액션은 버튼의 터치 이벤트가 세그웨이 실행으로 바로 연결되므로, 소스 코드를 추가하지 않아도 화면 전환 구현 가능
// 액션은 트리거와 세그웨이가 직접 연결된 것을 의미. 트리거는 터치 또는 클릭 이벤트를 발생시켜 세그웨이를 실행할 수 있는 요소를 말함. 액션은 화면 전환을 위해 코드가 필요 없다. 스토리보드에 구현된 객체를 트리거로 지정하기만 하면 되므로 전체적인 구성이 단순하다. 
class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }


}

